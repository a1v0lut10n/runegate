## Runegate nginx reference configuration
##
## Purpose: Terminate TLS on nginx, force HTTP→HTTPS, and proxy to
## Runegate on localhost:7870 with correct headers for cookies, redirects
## and websockets. Replace runegate.example.com with your domain.

# ─────────────────────────────────────────────────────────────────────────────
# Port 80: HTTP → HTTPS redirect only
# Keep this minimal. Certbot's nginx authenticator will inject a temporary
# challenge location for /.well-known/acme-challenge/ during renewal.
# ─────────────────────────────────────────────────────────────────────────────
server {
    listen 80;
    server_name runegate.example.com;  # Replace with your domain

    return 301 https://$host$request_uri;
}

# ─────────────────────────────────────────────────────────────────────────────
# Port 443: TLS termination + reverse proxy to Runegate
# ─────────────────────────────────────────────────────────────────────────────
server {
    listen 443 ssl http2;
    server_name runegate.example.com;  # Replace with your domain

    # TLS certs (example: Let's Encrypt via Certbot)
    ssl_certificate     /etc/letsencrypt/live/runegate.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/runegate.example.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Optional: Access/error logs
    access_log /var/log/nginx/runegate_access.log;
    error_log  /var/log/nginx/runegate_error.log;

    location / {
        # Upstream Runegate on the same host
        proxy_pass http://127.0.0.1:7870;

        # Preserve original host and client info
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;

        # IMPORTANT: Tell Runegate the original scheme is HTTPS
        proxy_set_header X-Forwarded-Proto https;

        # Forward cookies as sent (explicit for clarity)
        proxy_set_header Cookie $http_cookie;

        # WebSocket upgrade (for interactive apps)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts and large uploads/streams
        client_max_body_size 10G;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        # Avoid buffering large request bodies to disk; stream to upstream
        proxy_request_buffering off;

        # Keep upstream redirects intact
        proxy_redirect off;

        # Disable buffering for streaming responses (e.g., Gradio)
        proxy_buffering off;
    }
}
